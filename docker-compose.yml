version: '3.8'

services:
  # PostgreSQL with TimescaleDB extension
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: telemetry_timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: telemetry_db
      POSTGRES_USER: telemetry_user
      POSTGRES_PASSWORD: telemetry_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telemetry_user -d telemetry_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telemetry_network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: telemetry_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telemetry_network

  # pgAdmin for database management (optional, for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: telemetry_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@telemetry.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - timescaledb
    networks:
      - telemetry_network
    profiles:
      - dev  # Only start with --profile dev

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: telemetry_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - telemetry_network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: telemetry_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - telemetry_network
    profiles:
      - monitoring

volumes:
  timescale_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  telemetry_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16